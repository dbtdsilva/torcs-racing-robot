--- modules/simu/simuv2/collide.cpp	2013-04-22 16:26:18.637378225 +0200
+++ modules/simu/simuv2/collide.cpp	2013-03-29 11:47:29.530815000 +0100
@@ -49,7 +49,10 @@
 				car->DynGCg.vel.y -= normal.y * dotProd;
 				car->DynGCg.vel.z -= normal.z * dotProd;
 				if ((car->carElt->_state & RM_CAR_STATE_FINISH) == 0) {
-					car->dammage += (int)(wheel->trkPos.seg->surface->kDammage * fabs(dotProd) * simDammageFactor[car->carElt->_skillLevel]);
+					if (getDamageLimit())
+						car->dammage += (int)(wheel->trkPos.seg->surface->kDammage * fabs(dotProd) * simDammageFactor[car->carElt->_skillLevel]);
+					else
+						car->fakeDammage += (int)(wheel->trkPos.seg->surface->kDammage * fabs(dotProd) * simDammageFactor[car->carElt->_skillLevel]);
 				}
 			}
 		}
@@ -135,7 +138,10 @@
 		dotProd = initDotProd;
 		if (dotProd < 0.0f && (car->carElt->_state & RM_CAR_STATE_FINISH) == 0) {
 			dmg = curBarrier->surface->kDammage * (0.5f*dmgDotProd*dmgDotProd + 0.005f*fabs(1.0f-cosa)*absvel) * simDammageFactor[car->carElt->_skillLevel];
-			car->dammage += (int) dmg;
+			if (getDamageLimit())
+				car->dammage += (int)dmg;
+			else
+				car->fakeDammage += (int)dmg;
 		} else {
 			dmg = 0.0f;
 		}
@@ -291,7 +297,10 @@
 		}
 
 		if ((car[i]->carElt->_state & RM_CAR_STATE_FINISH) == 0) {
-			car[i]->dammage += (int)(CAR_DAMMAGE * fabs(j) * damFactor * simDammageFactor[car[i]->carElt->_skillLevel]);
+			if (getDamageLimit())
+				car[i]->dammage += (int)(CAR_DAMMAGE * fabs(j) * damFactor * simDammageFactor[car[i]->carElt->_skillLevel]);
+			else
+				car[i]->fakeDammage += (int)(CAR_DAMMAGE * fabs(j) * damFactor * simDammageFactor[car[i]->carElt->_skillLevel]);
 		}
 
 		// Compute collision velocity.
@@ -413,7 +422,10 @@
 
 	static const float DMGFACTOR = 0.00002f;
 	if ((car->carElt->_state & RM_CAR_STATE_FINISH) == 0) {
-		car->dammage += (int)(CAR_DAMMAGE * (DMGFACTOR*j*j) * damFactor * simDammageFactor[car->carElt->_skillLevel]);
+		if (getDamageLimit())
+			car->dammage += (int)(CAR_DAMMAGE * (DMGFACTOR*j*j) * damFactor * simDammageFactor[car->carElt->_skillLevel]);
+		else
+			car->fakeDammage += (int)(CAR_DAMMAGE * (DMGFACTOR*j*j) * damFactor * simDammageFactor[car->carElt->_skillLevel]);
 	}
 
 	sgScaleVec2(tmpv, n, j * car->Minv);
